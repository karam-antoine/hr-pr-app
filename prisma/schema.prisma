generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SectionType {
  QUESTIONS
  OBJECTIVES
}

enum QuestionType {
  RatingScale
  FreeText
}

enum LevelEnum {
  Leadership
  Manager
  Supervisory
  IC
}

enum CategoryEnum {
  Technical
  NonTechnical
}

enum QuestionnaireType {
  Self
  Manager
  Upwards
  Peer
}

enum StatusEnum {
  DRAFT
  SUBMITTED
}

model Cycle {
  id        String   @id @default(uuid())
  name      String
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Questionnaires Questionnaire[]
  participants   CycleParticipant[]
  assignments    CycleQuestionnaireAssignment[]
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  role      String
  managerId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  manager               User?                          @relation("UserToManager", fields: [managerId], references: [id])
  reports               User[]                         @relation("UserToManager")
  cycles                CycleParticipant[]
  assignmentsAsAssignee CycleQuestionnaireAssignment[] @relation("AssigneeRelation")
  assignmentsAsReviewee CycleQuestionnaireAssignment[] @relation("RevieweeRelation")
}

model RoleMapping {
  id        String       @id @default(uuid())
  role      String       @unique
  level     LevelEnum
  category  CategoryEnum
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Questionnaire {
  id          String                         @id @default(uuid())
  name        String
  version     Int                            @default(1)
  level       LevelEnum
  category    CategoryEnum
  type        QuestionnaireType
  isActive    Boolean                        @default(true)
  createdAt   DateTime                       @default(now())
  updatedAt   DateTime                       @updatedAt
  cycleId     String
  cycle       Cycle                          @relation(fields: [cycleId], references: [id])
  sections    Section[]
  assignments CycleQuestionnaireAssignment[]

  @@index([name, version], name: "idx_name_version")
}

model CycleParticipant {
  id        String   @id @default(uuid())
  cycleId   String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  cycle Cycle @relation(fields: [cycleId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@unique([cycleId, userId], name: "one_participant_per_cycle")
}

model CycleQuestionnaireAssignment {
  id              String   @id @default(uuid())
  cycleId         String
  questionnaireId String
  assigneeId      String
  revieweeId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  cycle         Cycle         @relation(fields: [cycleId], references: [id])
  questionnaire Questionnaire @relation(fields: [questionnaireId], references: [id])
  assignee      User          @relation("AssigneeRelation", fields: [assigneeId], references: [id])
  reviewee      User          @relation("RevieweeRelation", fields: [revieweeId], references: [id])

  responseSet ResponseSet?

  @@unique([cycleId, questionnaireId, assigneeId, revieweeId], name: "unique_assignment")
}

model ResponseSet {
  id           String     @id @default(uuid())
  assignmentId String     @unique
  status       StatusEnum @default(DRAFT)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @default(now()) @updatedAt
  submittedAt  DateTime?

  assignment CycleQuestionnaireAssignment @relation(fields: [assignmentId], references: [id])

  answers            Answer[]
  responseObjectives ResponseObjective[]
}

model Answer {
  id                String   @id @default(uuid())
  responseSetId     String
  sectionQuestionId String
  ratingValue       Int?
  textValue         String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now()) @updatedAt

  responseSet     ResponseSet     @relation(fields: [responseSetId], references: [id])
  sectionQuestion SectionQuestion @relation(fields: [sectionQuestionId], references: [id])
}

model ResponseObjective {
  id             String   @id @default(uuid())
  responseSetId  String
  objectiveIndex Int
  description    String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt

  responseSet ResponseSet @relation(fields: [responseSetId], references: [id])
  kpis        KPI[]
}

model KPI {
  id          String   @id @default(uuid())
  objectiveId String
  status      String
  text        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  objective ResponseObjective @relation(fields: [objectiveId], references: [id])

  @@index([objectiveId], name: "idx_objectiveId")
}

model Section {
  id              String      @id @default(uuid())
  questionnaireId String
  title           String
  type            SectionType
  orderIndex      Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now()) @updatedAt

  questionnaire    Questionnaire     @relation(fields: [questionnaireId], references: [id])
  sectionQuestions SectionQuestion[]
}

model Question {
  id          String       @id @default(uuid())
  text        String
  description String
  type        QuestionType
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now()) @updatedAt

  sectionQuestions SectionQuestion[]
}

model SectionQuestion {
  id         String   @id @default(uuid())
  sectionId  String
  questionId String
  orderIndex Int
  required   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  section  Section  @relation(fields: [sectionId], references: [id])
  question Question @relation(fields: [questionId], references: [id])
  answers  Answer[]
}
